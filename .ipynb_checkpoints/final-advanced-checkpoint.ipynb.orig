{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "krO312L4w82_",
   "metadata": {
    "id": "krO312L4w82_"
   },
   "source": [
    "# Advanced Methods in Natural Language Processing - Final Project\n",
    "## Predicting Movie Genres from Movie Descriptions\n",
    "### Nikita Baklazhenko, Miguel Conner, David Vallmanya, Dominik Wielath\n",
    "\n",
    "For our final project, we analyzed a data set of movie descriptions from the Internet Movie Database (IMDb) posted on Kaggle. The data set contains, besides the movie description also, its title, the year it was published, and its genre. Our project aims to predict the genre of a movie based on its description. In particular, we compare different methods regarding their predictive power, strengths, and limitations. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db6e9a56",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "db6e9a56",
    "outputId": "b3bc4ed2-f669-4268-a2a5-cb09ebad902f"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "[nltk_data] Error loading stopwords: <urlopen error [SSL:\n",
      "[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed:\n",
      "[nltk_data]     unable to get local issuer certificate (_ssl.c:997)>\n",
      "[nltk_data] Error loading stopwords: <urlopen error [SSL:\n",
      "[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed:\n",
      "[nltk_data]     unable to get local issuer certificate (_ssl.c:997)>\n",
      "[nltk_data] Error loading wordnet: <urlopen error [SSL:\n",
      "[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed:\n",
      "[nltk_data]     unable to get local issuer certificate (_ssl.c:997)>\n",
      "2023-03-30 22:37:45.787396: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
=======
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /home/davovapo/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /home/davovapo/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /home/davovapo/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "2023-03-30 22:25:42.034331: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2023-03-30 22:25:42.137420: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:25:42.137437: I tensorflow/compiler/xla/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2023-03-30 22:25:42.595369: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:25:42.595445: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:25:42.595451: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
>>>>>>> refs/remotes/origin/main
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import torch\n",
    "import re \n",
    "\n",
    "from collections import Counter\n",
    "from helper_functions import *\n",
    "\n",
    "# Natural language Toolkit\n",
    "import nltk\n",
    "nltk.download('stopwords')\n",
    "nltk.download('wordnet')\n",
    "\n",
    "from nltk.stem import SnowballStemmer                                   # Porter's II Stemmer\n",
    "from nltk import word_tokenize                                          # Document tokenizer\n",
    "from nltk.corpus import stopwords \n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "\n",
    "from sklearn.metrics import f1_score, recall_score\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "import tensorflow as tf\n",
    "import tensorflow.keras as keras\n",
    "from tensorflow.keras.layers import GRU, Dense, Embedding, Dropout, Bidirectional\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df6a3626",
   "metadata": {
    "id": "df6a3626"
   },
   "source": [
    "# Load Data"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 26,
=======
   "execution_count": 3,
>>>>>>> refs/remotes/origin/main
   "id": "BSauhdxYujWv",
   "metadata": {
    "id": "BSauhdxYujWv"
   },
   "outputs": [],
   "source": [
    "# Set directory\n",
    "directory_david = '/run/media/david-vp/davidvp-files/DSMMaster/advanced-nlp/final-proj/'\n",
    "directory_david2 = '/run/media/davovapo/hdd1-dvp/DSMMaster/advanced-nlp/Advanced_NLP_Project/'\n",
    "directory_miguel ='/Users/Miguel/Desktop/BSE/Term2/Advanced NLP/Advanced_NLP_Project/'\n",
    "directory_dominik = ''\n",
    "\n",
<<<<<<< HEAD
    "directory = directory_miguel + 'Genre Classification Dataset/'"
=======
    "directory = directory_david2"
>>>>>>> refs/remotes/origin/main
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 27,
=======
   "execution_count": 4,
>>>>>>> refs/remotes/origin/main
   "id": "wsFOzwD0u2cp",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 263
    },
    "id": "wsFOzwD0u2cp",
    "outputId": "8159470f-8b62-47ed-9d77-a5e64fab58a4"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "/var/folders/gs/1_v5qmgn6rv2g4xtpvbhlpgm0000gn/T/ipykernel_92423/521048698.py:4: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
=======
      "/tmp/ipykernel_247012/521048698.py:4: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
>>>>>>> refs/remotes/origin/main
      "  df_train = pd.read_csv(os.path.join(directory, filename), delimiter=\":::\", encoding='utf-8', header=None)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>genre</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Oscar et la dame rose (2009)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Listening in to a conversation between his do...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Cupid (1997)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>A brother and sister with a past incestuous r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Young, Wild and Wonderful (1980)</td>\n",
       "      <td>adult</td>\n",
       "      <td>As the bus empties the students for their fie...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Secret Sin (1915)</td>\n",
       "      <td>drama</td>\n",
       "      <td>To help their unemployed father make ends mee...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Unrecovered (2007)</td>\n",
       "      <td>drama</td>\n",
       "      <td>The film's title refers not only to the un-re...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                title     genre  \\\n",
       "0       Oscar et la dame rose (2009)      drama   \n",
       "1                       Cupid (1997)   thriller   \n",
       "2   Young, Wild and Wonderful (1980)      adult   \n",
       "3              The Secret Sin (1915)      drama   \n",
       "4             The Unrecovered (2007)      drama   \n",
       "\n",
       "                                         description  \n",
       "0   Listening in to a conversation between his do...  \n",
       "1   A brother and sister with a past incestuous r...  \n",
       "2   As the bus empties the students for their fie...  \n",
       "3   To help their unemployed father make ends mee...  \n",
       "4   The film's title refers not only to the un-re...  "
      ]
     },
<<<<<<< HEAD
     "execution_count": 27,
=======
     "execution_count": 4,
>>>>>>> refs/remotes/origin/main
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load training data set\n",
    "filename =\"train_data.txt\"\n",
    "\n",
    "df_train = pd.read_csv(os.path.join(directory, filename), delimiter=\":::\", encoding='utf-8', header=None)\n",
    "\n",
    "df_train.drop(columns=df_train.columns[0], axis=1, inplace=True)\n",
    "df_train.columns =['title', 'genre', 'description']\n",
    "df_train['genre']=df_train['genre'].apply(lambda x: x.strip())\n",
    "\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 28,
=======
   "execution_count": 5,
>>>>>>> refs/remotes/origin/main
   "id": "d8c33524",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 263
    },
    "id": "d8c33524",
    "outputId": "2f648df5-f5f7-47be-880a-692d3518a276"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "/var/folders/gs/1_v5qmgn6rv2g4xtpvbhlpgm0000gn/T/ipykernel_92423/2294710050.py:3: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
=======
      "/tmp/ipykernel_247012/2294710050.py:3: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n",
>>>>>>> refs/remotes/origin/main
      "  df_test = pd.read_csv(os.path.join(directory, filename), delimiter=\":::\", encoding='utf-8', header=None)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>genre</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Edgar's Lunch (1998)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>L.R. Brane loves his life - his car, his apar...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>La guerra de papá (1977)</td>\n",
       "      <td>comedy</td>\n",
       "      <td>Spain, March 1964: Quico is a very naughty ch...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Off the Beaten Track (2010)</td>\n",
       "      <td>documentary</td>\n",
       "      <td>One year in the life of Albin and his family ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Meu Amigo Hindu (2015)</td>\n",
       "      <td>drama</td>\n",
       "      <td>His father has died, he hasn't spoken with hi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Er nu zhai (1955)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Before he was known internationally as a mart...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           title        genre  \\\n",
       "0          Edgar's Lunch (1998)      thriller   \n",
       "1      La guerra de papá (1977)        comedy   \n",
       "2   Off the Beaten Track (2010)   documentary   \n",
       "3        Meu Amigo Hindu (2015)         drama   \n",
       "4             Er nu zhai (1955)         drama   \n",
       "\n",
       "                                         description  \n",
       "0   L.R. Brane loves his life - his car, his apar...  \n",
       "1   Spain, March 1964: Quico is a very naughty ch...  \n",
       "2   One year in the life of Albin and his family ...  \n",
       "3   His father has died, he hasn't spoken with hi...  \n",
       "4   Before he was known internationally as a mart...  "
      ]
     },
<<<<<<< HEAD
     "execution_count": 28,
=======
     "execution_count": 5,
>>>>>>> refs/remotes/origin/main
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load testing data set\n",
    "filename = \"test_data_solution.txt\"\n",
    "df_test = pd.read_csv(os.path.join(directory, filename), delimiter=\":::\", encoding='utf-8', header=None)\n",
    "\n",
    "df_test.drop(columns=df_test.columns[0], axis=1, inplace=True)\n",
    "df_test.columns =['title', 'genre', 'description']\n",
    "df_test['genre']=df_test['genre'].apply(lambda x: x.strip())\n",
    "\n",
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "nh6iLk_5v-Hp",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 651
    },
    "id": "nh6iLk_5v-Hp",
    "outputId": "fbfdc084-4939-4d3e-8eef-26d91d9a1b60"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a bar plot of the genre counts\n",
    "sns.set_style(\"whitegrid\")\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.barplot(x=df_train.genre.value_counts().index,\n",
    "            y=df_train.genre.value_counts(),\n",
    "            palette=\"muted\")\n",
    "\n",
    "# Customize the plot\n",
    "plt.title(\"Films per category\", fontsize=18)\n",
    "plt.xlabel(\"Category\", fontsize=14)\n",
    "plt.ylabel(\"Number of Films\", fontsize=14)\n",
    "plt.xticks(rotation=45, ha='right', fontsize=12)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "-LFE6vkB4xWz",
   "metadata": {
    "id": "-LFE6vkB4xWz"
   },
   "source": [
    "We can see that we have very large class imbalance. There are many movies in few categories while most categories only contain a small number of movies. As we expect our model's performance to correlate with the sample size for each category, we exclude categories with very few numbers of movies within our training set. Further, we exclude genres from which we expect that there might be larger variation in the topics discussed in the description. For example a short film could deal with topics similar to genres like horror or comedy. There is likely no clear pattern. Therefore, we also exclude these categories in our analysis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f58f5443",
   "metadata": {
    "id": "f58f5443"
   },
   "outputs": [],
   "source": [
    "# Only keep some columns\n",
    "list_labels = [\"drama\", \"comedy\", \"horror\", \"thriller\", \"action\", \"western\", \"sci-fi\"]\n",
    "\n",
    "df_train = df_train[df_train[\"genre\"].isin(list_labels)]\n",
    "df_test = df_test[df_test[\"genre\"].isin(list_labels)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "oLJvaBr-xIS6",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 620
    },
    "id": "oLJvaBr-xIS6",
    "outputId": "20a728a2-af07-4de4-db2f-5be53bf0422d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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Kwo/Pz/pe0dERIjx48dL17B169YMx2rrdnBwEA4ODmLXrl0iMTFRCPH6Nad9DTZp0kTY2tqKxYsXZ9oHKSkpwsXFRdja2or169e/ta+IKHMMzkT02aQPzi4uLm/93507d6RjPjY4u7m5ieTk5AzHjh07VmrTq1cvkZaWlqFN586dha2trZgwYYLO9jVr1ghbW1vRu3fvrHZFprTB2dbWVixatCjTNmPGjBG2traiRo0aIikpSdqu0WhEw4YNha2trdi2bdtbv8fAgQOFra2tmDlzps52bXC2tbUVQ4YMyfI1PHjwQJQvX17Y2tqKuXPnZvk8b3r+/LmoVKmSUCqVGUK/EPKC8549e4Stra1o3LixiImJybTNjRs3hFKpFBUrVhQqlUraHhoaKl3X8uXLMz02/c/vzeDs7+8v7Xvbz0cbrJ2dnXV+tkL8Lzjb2tqKf/75563XuGHDBmFrayt+/PFHkZqammH/kSNHhK2trahUqZKIiop663mIKHO8OZCI9EKlUr31f6mpqdn2fXr06JHhI3cAOlMV+vXrl+m0B22bN9eUzpcvHwAgOjoaGo0m22rVyp07N/r06ZPpPg8PDwCvpxykX5nk0qVLePToEfLnz4927dq99dytWrUCAJw5c+atbfr375+Fql/bu3cv0tLS8M0332DYsGFZPs+bbGxsUL58eQghcO3atSydY9euXQCATp06wdLSMtM2lSpVQrly5aBWq3UerHP06FGkpaXB3NwcPXv2zPTYwYMHv/V7Hzp0CABQpEiRt/58hg8fDgDStJHMlCtXDj///PNbv4+7uzvMzc3x/PlznDx5MsP+HTt2AAAaNmyIAgUKvPU8RJQ5znEmIr34XA84qVy5cqbb068jbW9v/842MTExOttr1aqFXLly4datW+jSpQvatGmDmjVromTJktlSc6VKlWBhYZHpvu+++w5FihTB8+fPERgYKIWoq1evAgDi4uIy3HSXnlqtBgCEhYVluj937tyoWLFilmvX1vHDDz980I2RwOub9g4ePIiDBw8iODgY0dHRSE5OztDu+fPnH1yXRqOBv78/gNdrPq9evfqtbV+9egUACA0NlbbdvHkTwOufjfaG0jd9++23KFq0KJ49e5ZhX2BgIADA2dkZRkaZj1mVKVMGNjY2CA8P1/nZple1atW31g28/qOuSZMm2L17N3bs2KFz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IiIiQ2Bwq2q8jzY0P378GBs2bED+/Pl19js6OiImJgaBgYHStvPnzyMtLQ2VK1cGADg4OODy5ctQq9VSm7Nnz6J06dKwsrKS2pw/f17n3GfPnoWDg8MnujIiIiIiMmQGF5zj4+MRFBSEoKAgAMDTp08RFBSEsLAwqNVqDBs2DIGBgZg/fz40Gg0iIyMRGRmJlJQUAECZMmVQu3ZtTJ48GQEBAbhy5Qq8vLzg5uYGGxsbAEDz5s1hamqKiRMn4u7duzh06BD8/PzQq1cvqY7u3bvj9OnT+O2333D//n0sXboUgYGB6Nq16+fvFCIiIiLSO4UQQui7iPQuXLiA7t27Z9ju7u6OIUOGoF69epke5+fnB2dnZwCvH4Di5eWF48ePw8jICA0bNsSkSZOQN29eqX1wcDBmzJiBGzduIH/+/OjatSv69++vc87Dhw9j0aJFCA0NxXfffYexY8e+dam8zGg0Gvj7+8PBweG90w0mrLyMR8/iZJ/7a/BdUQt4D3LSdxlERET0BfuQvGZwwflLwuD8cRiciYiI6FP7kLxmcFM1iIiIiIgMEYMzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMBhecL126hIEDB8LV1RVKpRJ///23zn4hBBYvXgxXV1dUrlwZPXv2xKNHj3TavHz5EqNHj0bVqlXh5OSECRMmID4+XqdNcHAwOnfuDHt7e9SpUwdr167NUMvhw4fRuHFj2Nvbo3nz5jh58mS2Xy8RERER5QwGF5wTEhKgVCoxderUTPevXbsWmzZtwrRp07Bjxw6Ym5ujT58+SE5OltqMGTMG9+7dg6+vL1atWoXLly9jypQp0v64uDj06dMHxYoVw+7du+Hp6Ylly5Zh+/btUpurV69i9OjRaNu2Lfbu3Yt69erBw8MDd+7c+XQXT0REREQGy+CCc506dTBy5Eg0aNAgwz4hBPz8/DBo0CDUr18f5cuXx9y5cxERESGNTN+/fx+nT5/GzJkzUaVKFTg5OWHSpEk4ePAgwsPDAQD79u2DWq2Gt7c3ypUrBzc3N3Tr1g2+vr7S9/Lz80Pt2rXRt29flClTBiNGjICdnR02b978eTqCiIiIiAyKib4L+BBPnz5FZGQkXFxcpG2WlpaoUqUKrl27Bjc3N1y7dg358uWDvb291MbFxQVGRkYICAhAgwYN4O/vDycnJ5iZmUltXF1dsXbtWrx69QpWVlbw9/dHz549db6/q6trhqkjcmg0mnfuNzY2/uBzfk3e139EREREWfUhOSNHBefIyEgAQMGCBXW2FyxYECqVCgCgUqlQoEABnf0mJiawsrKSjlepVChRooROG2tra2mflZUVVCqVtC2z7/Mhbty48dZ95ubmsLOz++Bzfk1u376NxMREfZdBREREX7kcFZxzKnt7e44qfwSlUqnvEoiIiOgLpdFo3jnImV6OCs6FChUCAERFRaFw4cLS9qioKJQvXx7A65Hj6OhoneNSU1Px6tUr6Xhra+sMI8far7WjzJm1iYqKyjAKLYexsTGD80dg3xEREZEhMLibA9+lRIkSKFSoEM6dOydti4uLw/Xr1+Ho6AgAcHR0RExMDAIDA6U258+fR1paGipXrgwAcHBwwOXLl6FWq6U2Z8+eRenSpWFlZSW1OX/+vM73P3v2LBwcHD7V5RERERGRATO44BwfH4+goCAEBQUBeH1DYFBQEMLCwqBQKNC9e3esXLkS//zzD27fvg1PT08ULlwY9evXBwCUKVMGtWvXxuTJkxEQEIArV67Ay8sLbm5usLGxAQA0b94cpqammDhxIu7evYtDhw7Bz88PvXr1kuro3r07Tp8+jd9++w3379/H0qVLERgYiK5du37+TiEiIiIivVMIIYS+i0jvwoUL6N69e4bt7u7u8PHxgRACS5YswY4dOxATE4Nq1aph6tSpKF26tNT25cuX8PLywvHjx2FkZISGDRti0qRJyJs3r9QmODgYM2bMwI0bN5A/f3507doV/fv31/mehw8fxqJFixAaGorvvvsOY8eORZ06dWRfi0ajgb+/PxwcHN473WDCyst49CxO9rm/Bt8VtYD3ICd9l0FERERfsA/JawYXnL8kDM4fh8GZiIiIPrUPyWsGN1WDiIiIiMgQMTgTEREREcnA4ExEREREJAODMxERERGRDAzOREREREQyMDgTEREREcnA4ExEREREJINJVg9MS0uDkZFu7r527RpOnDgBMzMztGnTBkWKFPnoAomIiIiIDEGWRpy9vb1RpUoVxMTESNuOHDmCLl26YPXq1Vi6dCnc3d3x/PnzbCuUiIiIiEifshScL1y4gJo1ayJfvnzStiVLlsDS0hJz5szB2LFjERMTg/Xr12dboURERERE+pSlqRrPnz9H9erVpa+fPHmCBw8eYMiQIWjZsiUA4PLlyzh9+nT2VElEREREpGdZGnFOSEhAnjx5pK8vXboEhUKBH3/8UdpWtmxZhIeHf3yFREREREQGIEvBuXDhwnj48KH09enTp5EnTx5UrFhR2hYXFwczM7OPr5CIiIiIyABkaapGjRo1cODAAWzevBm5cuXCsWPHUK9ePRgbG0ttQkJCYGNjk22FEhERERHpU5aC88CBA/H3339j1qxZEELA3NwcQ4cOlfbHxcXh8uXLcHd3z7ZCiYiIiIj0KUvBuVSpUjh48CCOHj0KAKhbty6KFy8u7X/8+DE6dOiAZs2aZU+VRERERER6luUHoBQuXBhdu3bNdF/FihV15jsTEREREeV0fOQ2EREREZEMWR5xjouLwx9//IHbt28jIiICarU6QxuFQoGNGzd+VIFERERERIYgS8E5ICAA/fr1Q0xMDIQQb22nUCiyXBgRERERkSHJUnD29vZGbGwsRo8ejWbNmqFQoUI6S9EREREREX1pshScb926haZNm6Jv377ZXQ8RERERkUHK0s2BVlZWKFCgQHbXQkRERERksLIUnOvXr4/z588jLS0tu+shIiIiIjJIWQrOo0ePhomJCcaMGYPw8PDsromIiIiIyOBkaY6zhYUFvLy80KtXLxw+fBj5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ZNCyFJxr1KiR3XUQERERERk0PgCFiIiIiEiGLAfn1NRUbNiwAW3btkXVqlVhZ2cn7QsKCsK0adPw8OHDbCmSiIiIiEjfsjRVIykpCb1798a1a9eQP39+WFhYIDExUdpfokQJ7N69G1ZWVhg5cmS2FUtEREREpC9ZGnFetWoVrl69ilGjRuG///5Du3btdPZbWlqievXqOHPmTLYUSURERESkb1kKzocPH4azszP69esHhUIBhUKRoU3JkiXx7Nmzjy6QiIiIiMgQZCk4h4WFoVKlSu9skzdvXsTGxmapKCIiIiIiQ5Ol4Jw3b15ER0e/s82TJ09QoECBLBVFRERERGRoshScHRwccPz4ccTExGS6/9mzZzh58iScnJw+qjgiIiIiIkORpeDcp08fxMTEoGfPnrhy5QpSU1MBAImJiTh37hz69OkDjUaDXr16ZWuxRERERET6kqXl6KpXr47JkyfD29sbXbt2lbZXrVoVAGBsbIypU6e+dx40EREREVFOkaXgDACdO3eGs7Mzfv/9dwQEBODVq1fImzcvqlSpgs6dO6NcuXLZWScRERERkV5lOTgDQJkyZTBp0qTsqoWIiIiIyGBl+ZHbRERERERfk48acT527Bh2796NoKAgxMbGwtLSEhUqVECbNm1Qv3797KqRiIiIiEjvshScU1NTMXr0aBw9ehRCCJiYmOCbb76BSqXCv//+ixMnTqBhw4ZYsGABTEw+KpsTERERERmELE3VWL16Nf766y84OTlhy5YtCAgIwJkzZxAQEIDNmzejWrVqOHr0KNasWZPd9RIRERER6UWWgvPu3bvx/fffw9fXF9WqVYOR0evTGBkZwcnJCb6+vvjuu++wa9eubC2WiIiIiEhfshScIyMjUbdu3bdOwzA1NUXdunURGRn5UcURERERERmKLAXnokWLIiEh4Z1tEhMTUbRo0SwVRURERERkaLIUnNu2bYvDhw8jIiIi0/3h4eE4dOgQ2rVr91HFEREREREZCllLXoSFhel83aRJE1y9ehXu7u7o0aMHqlatCmtra6hUKly5cgV+fn6oVq0aGjdu/EmKJiIiIiL63GQF559//hkKhSLDdiEEFi5cmOn248eP48SJE7h169bHV0lEREREpGeygnOrVq0yDc76Eh4ejnnz5uH06dNITExEqVKl4O3tDXt7ewCvg/uSJUuwc+dO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rq6YNm0a7t27Bzs7O/j7+6NWrVo639PV1RXe3t4fXKtGo3nnfmNj4w8+59fkff0nB/v47bKjf4mIiHKqD/k9mCOD88GDB3Hr1i388ccfGfapVCqYmpoiX758OtsLFiyIyMhIqU360AxA+vp9beLi4pCUlITcuXPLrvfGjRtv3Wdubg47OzvZ5/oa3b59G4mJiVk+nn38bh/bv0RERF+LHBecnz17hlmzZuG3335Drly59F2OLPb29hzx/AhvzmGn7MX+JSKir5lGo3nnIGd6OS4437x5E1FRUWjdurW0TaPR4NKlS9iyZQvWr18PtVqNmJgYnVHnqKgoFCpUCMDrkeOAgACd82pX3Ujf5s2VOFQqFSwsLD5otBl4PU2AwTnr2HefFvuXiIhInhwXnGvWrIn9+/frbBs/fjy+//579OvXD0WLFoWpqSnOnTuHRo0aAQAePHiAsLAwODg4AAAcHBywatUqREVFoWDBggCAs2fPwsLCAmXLlpXanDp1Suf7nD17VjoHEREREX1dclxwtrCwgK2trc62PHny4JtvvpG2t2nTBj4+PrCysoKFhQVmzpwJR0dHKfS6urqibNmy8PT0xNixYxEZGYlFixahS5cuMDMzAwB07NgRW7Zswdy5c9GmTRucP38ehw8fxurVqz/r9RIRERGRYchxwVmOCRMmwMjICMOGDUNKSgpcXV0xdepUab+xsTFWrVqFadOmoUOHDjA3N4e7uzuGDRsmtSlZsiRWr16N2bNnw8/PD0WKFMHMmTNRu3ZtfVwSEREREenZFxGcN23apPN1rly5MHXqVJ2w/KbixYtj7dq17zyvs7Mz9u7dmx0lEhEREVEOl2MfgEJERERE9DkxOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEREREZEMDM5ERERERDIwOBMRERERycDgTEREREQkA4MzEX20NJGm7xIMFvuGiOjLYaLvAogo5zNSGOH3W5sRkRCu71IMSuE8Nuhk11XfZRARUTbJccF59erVOHr0KB48eIDcuXPD0dERY8aMwffffy+1SU5Oho+PDw4dOoSUlBS4urpi6tSpsLa2ltqEhYVh2rRpuHDhAvLkyYNWrVph9OjRMDH5X5dcuHABPj4+uHv3LooWLYpBgwahdevWn/V6iXKKiIRwhMaF6rsMIiKiTybHTdW4ePEiunTpgh07dsDX1xepqano06cPEhISpDbe3t74999/sWjRImzatAkREREYMmSItF+j0WDAgAFQq9XYtm0bfHx8sGfPHixZskRq8+TJEwwYMADOzs74888/0aNHD0yaNAmnT5/+rNdLRERERIYhx404r1+/XudrHx8f1KpVCzdv3kT16tURGxuLXbt2Yf78+ahVqxaA10G6adOm8Pf3h4ODA86cOYN79+7B19cX1tbWqFChAoYPH4758+djyJAhMDMzw7Zt21CiRAmMGzcOAFCmTBlcuXIFGzZsQO3atT/7dRMRERGRfuW44Pym2NhYAICVlRUAIDAwEGq1Gi4uLlKbMmXKoFixYlJw9vf3h62trc7UDVdXV0ybNg337t2DnZ0d/P39peCdvo23t/cH16jRaN6539jY+IPP+TV5X//JwT5+O/bvp5cdfUxERJ/Gh7xH5+jgnJaWBm9vb1StWhW2trYAAJVKBVNTU+TLl0+nbcGCBREZGSm1SR+aAUhfv69NXFwckpKSkDt3btl13rhx4637zM3NYWdnJ/tcX6Pbt28jMTExy8ezj9+N/fvpfWwfExGRYcjRwXn69Om4e/cutm7dqu9S3sne3p4jch9BqVTqu4QvGvv302MfExEZLo1G885BzvRybHCeMWMGTpw4gc2bN6NIkSLSdmtra6jVasTExOiMOkdFRaFQoUJSm4CAAJ3zqVQqANBpo92Wvo2FhcUHjTYDrz/GZnDOOvbdp8X+/fTYx0REX4Yct6qGEAIzZszAsWPHsHHjRpQsWVJnf6VKlWBqaopz585J2x48eICwsDA4ODgAABwcHHDnzh1ERUVJbc6ePQsLCwuULVtWanP+/Hmdc589e1Y6BxERERF9XXJccJ4+fTr27duHBQsWIG/evIiMjERkZCSSkpIAAJaWlmjTpg18fHxw/vx5BAYGYsKECXB0dJRCr6urK8qWLQtPT08EBwfj9OnTWLRoEbp06QIzMzMAQMeOHfHkyRPMnTsX9+/fx5YtW3D48GH07NlTT1dORERERPqU46Zq/P777wCAbt266WyfPXu29HCSCRMmwMjICMOGDdN5AIqWsbExVq1ahWnTpqFDhw4wNzeHu7s7hg0bJrUpWbIkVq9ejdmzZ8PPzw9FihTBzJkzuRQdERER0VcqxwXn27dvv7dNrly5MHXqVJ2w/KbixYtj7dq17zyPs7Mz9u7d+6ElEhEREdEXKMdN1SAiIiIi0gcGZyIiIiIiGRiciYiIiIhkYHAmIiIiIpKBwZmIiIiISAYGZyIiIiIiGRiciYiIiIhkYHAmIsoBRFqavkswWOwbIvpcctwDUIiIvkYKIyPc9fNDYni4vksxKOY2NijXvbu+yyCirwSDMxFRDpEYHo6Ep0/1XQYR0VeLUzWIiIiIiGRgcCYiIiIikoHBmYiIiIhIBgZnIiIiIiIZGJyJiIiIiGRgcCYioq9eWprQdwkGi31D9D9cjo6IiL56RkYKHPv9AqIjYvVdikEpUNgSDTo567sMIoPB4ExERAQgOiIWqtCX+i6DiAwYp2oQEREREcnA4ExEREREJAODMxERERGRDAzOREREREQyMDgTEREREcnA4ExEREREJAODMxERERGRDAzORERE9MmlpWn0XYLBYt/kHHwAChEREX1yRkbG2LPGB6pnT/RdikGxLloS7v3H6bsMkonBmYiIiD4L1bMneB5yT99lEGUZp2oQEREREcnA4ExEREREJAODMxERERGRDAzOREREREQyMDgTEREREcnA4ExEREREJAODMxERERGRDAzOREREREQyMDgTEREREcnA4ExERESUw4k0oe8SDFZ29g0fuU1ERESUwymMFHh8IBDJUfH6LsWg5CqYF6WaVcq28zE4ExEREX0BkqPikRgRq+8yvmicqkFEREREJAODMxERERGRDAzO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\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a bar plot of the genre counts\n",
    "sns.set_style(\"whitegrid\")\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.barplot(x=df_train.genre.value_counts().index,\n",
    "            y=df_train.genre.value_counts(),\n",
    "            palette=\"muted\")\n",
    "\n",
    "# Customize the plot\n",
    "plt.title(\"Films per category\", fontsize=18)\n",
    "plt.xlabel(\"Category\", fontsize=14)\n",
    "plt.ylabel(\"Number of Films\", fontsize=14)\n",
    "plt.xticks(rotation=45, ha='right', fontsize=12)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "-HRXfdNLx4IP",
   "metadata": {
    "id": "-HRXfdNLx4IP"
   },
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "t9AHVtvFYrTt",
   "metadata": {
    "id": "t9AHVtvFYrTt"
   },
   "source": [
    "## Extract the year from the title and save it as variable in the data frame"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 8,
=======
   "execution_count": 9,
>>>>>>> refs/remotes/origin/main
   "id": "__7155cVYC9g",
   "metadata": {
    "id": "__7155cVYC9g"
   },
   "outputs": [],
   "source": [
    "df_train[\"year\"] = df_train[\"title\"].apply(get_year)\n",
    "df_test[\"year\"] = df_test[\"title\"].apply(get_year)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "314f2a64",
   "metadata": {
    "id": "314f2a64"
   },
   "source": [
    "## Remove Stopwords"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 9,
=======
   "execution_count": 10,
>>>>>>> refs/remotes/origin/main
   "id": "9cbb4392",
   "metadata": {
    "id": "9cbb4392"
   },
   "outputs": [],
   "source": [
    "# Defining stopwords\n",
    "# using predefined english stopwords\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "# including additional stopwords\n",
    "my_stopwords = ['lol', 'people', 'expand',\n",
    "                'really', 'deal','u', 'much', 'get', 'good', 'act', 'put', 'man', 'a', 'think', 'one',\n",
    "                'say', 'like', 'go', 'do', 'head', 'yet', 'wall', 'guess', 'keep', 'oh', 'north', 'oil',\n",
    "                'prize', 'involved', 'might', 'medium''among', 'might', 'make', 'do', 'may', 'year', 'give',\n",
    "                'also', 'law', 'etc', 'wait', 'prove', 'mean', 'thing', 'rest', 'middle','rnr','u','fuck','make',\n",
    "                'would', 'know', 'lot', 'see', 'president', 'done', 'even', 'many', 'ever', 'want', 'made',\n",
    "                'got', 'going', 'need', 'view', 'something', 'lasting', 'still', 'way', 'every', 'anyone', \n",
    "                'first', 'look', 'medium', 'time', 'since', 'life', 'probably', 'anything', 'come', \n",
    "                'long', 'could', 'anything', 'donald', 'back', 'sure', 'last', 'nothing', 'rate', 'well',\n",
    "                'left', 'le', 'someone', 'example', 'seen', 'day', 'said', 'world', 'making', 'far', 'care',\n",
    "                'shit','america','issue','new', 'actually','never','whole','exposed','imapct','side','single']\n",
    "stop_words.update(my_stopwords)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 10,
=======
   "execution_count": 11,
>>>>>>> refs/remotes/origin/main
   "id": "Rm2qPmqJ0BPD",
   "metadata": {
    "id": "Rm2qPmqJ0BPD"
   },
   "outputs": [],
   "source": [
    "df_train['description_pp'] = df_train['description'].apply(remove_stopwords, args=(stop_words,))\n",
    "df_test['description_pp'] = df_test['description'].apply(remove_stopwords, args=(stop_words,))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fda95e9",
   "metadata": {
    "id": "0fda95e9"
   },
   "source": [
    "### Lemmatize"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 11,
=======
   "execution_count": 12,
>>>>>>> refs/remotes/origin/main
   "id": "559ace0b",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "559ace0b",
    "outputId": "36abbf3c-5f82-43af-8ef3-4fdef33ba49e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>genre</th>\n",
       "      <th>description</th>\n",
       "      <th>year</th>\n",
       "      <th>description_pp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Oscar et la dame rose (2009)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Listening in to a conversation between his do...</td>\n",
       "      <td>2009</td>\n",
       "      <td>Listening conversation doctor parents, 10-year...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Cupid (1997)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>A brother and sister with a past incestuous r...</td>\n",
       "      <td>1997</td>\n",
       "      <td>brother sister past incestuous relationship cu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Secret Sin (1915)</td>\n",
       "      <td>drama</td>\n",
       "      <td>To help their unemployed father make ends mee...</td>\n",
       "      <td>1915</td>\n",
       "      <td>help unemployed father ends meet, Edith twin s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Unrecovered (2007)</td>\n",
       "      <td>drama</td>\n",
       "      <td>The film's title refers not only to the un-re...</td>\n",
       "      <td>2007</td>\n",
       "      <td>film's title refers un-recovered bodies ground...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>\"Pink Slip\" (2009)</td>\n",
       "      <td>comedy</td>\n",
       "      <td>In tough economic times Max and Joey have all...</td>\n",
       "      <td>2009</td>\n",
       "      <td>tough economic times Max Joey run ideas until,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            title     genre  \\\n",
       "0   Oscar et la dame rose (2009)      drama   \n",
       "1                   Cupid (1997)   thriller   \n",
       "3          The Secret Sin (1915)      drama   \n",
       "4         The Unrecovered (2007)      drama   \n",
       "6             \"Pink Slip\" (2009)     comedy   \n",
       "\n",
       "                                         description  year  \\\n",
       "0   Listening in to a conversation between his do...  2009   \n",
       "1   A brother and sister with a past incestuous r...  1997   \n",
       "3   To help their unemployed father make ends mee...  1915   \n",
       "4   The film's title refers not only to the un-re...  2007   \n",
       "6   In tough economic times Max and Joey have all...  2009   \n",
       "\n",
       "                                      description_pp  \n",
       "0  Listening conversation doctor parents, 10-year...  \n",
       "1  brother sister past incestuous relationship cu...  \n",
       "3  help unemployed father ends meet, Edith twin s...  \n",
       "4  film's title refers un-recovered bodies ground...  \n",
       "6  tough economic times Max Joey run ideas until,...  "
      ]
     },
<<<<<<< HEAD
     "execution_count": 11,
=======
     "execution_count": 12,
>>>>>>> refs/remotes/origin/main
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tokenize: Split the sentence into words\n",
    "docs = df_train['description_pp']\n",
    "\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "docs = [[lemmatizer.lemmatize(token) for token in doc] for doc in docs]\n",
    "\n",
    "# Lemmatize list of words and join\n",
    "lemmatized_output = [''.join([lemmatizer.lemmatize(w) for w in doc]) for doc in docs]\n",
    "df_train['description_pp'] = lemmatized_output\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 12,
=======
   "execution_count": 13,
>>>>>>> refs/remotes/origin/main
   "id": "979b414c",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "979b414c",
    "outputId": "568730bb-6b35-4474-b696-85214800505e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>genre</th>\n",
       "      <th>description</th>\n",
       "      <th>year</th>\n",
       "      <th>description_pp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Edgar's Lunch (1998)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>L.R. Brane loves his life - his car, his apar...</td>\n",
       "      <td>1998</td>\n",
       "      <td>L.R. Brane loves - car, apartment, job, especi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>La guerra de papá (1977)</td>\n",
       "      <td>comedy</td>\n",
       "      <td>Spain, March 1964: Quico is a very naughty ch...</td>\n",
       "      <td>1977</td>\n",
       "      <td>Spain, March 1964: Quico naughty child three b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Meu Amigo Hindu (2015)</td>\n",
       "      <td>drama</td>\n",
       "      <td>His father has died, he hasn't spoken with hi...</td>\n",
       "      <td>2015</td>\n",
       "      <td>father died, spoken brother 10 years serious c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Er nu zhai (1955)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Before he was known internationally as a mart...</td>\n",
       "      <td>1955</td>\n",
       "      <td>known internationally martial arts superstar, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Riddle Room (2016)</td>\n",
       "      <td>horror</td>\n",
       "      <td>Emily Burns is being held captive in a room w...</td>\n",
       "      <td>2016</td>\n",
       "      <td>Emily Burns held captive room idea there. Dete...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        title     genre  \\\n",
       "0       Edgar's Lunch (1998)   thriller   \n",
       "1   La guerra de papá (1977)     comedy   \n",
       "3     Meu Amigo Hindu (2015)      drama   \n",
       "4          Er nu zhai (1955)      drama   \n",
       "5         Riddle Room (2016)     horror   \n",
       "\n",
       "                                         description  year  \\\n",
       "0   L.R. Brane loves his life - his car, his apar...  1998   \n",
       "1   Spain, March 1964: Quico is a very naughty ch...  1977   \n",
       "3   His father has died, he hasn't spoken with hi...  2015   \n",
       "4   Before he was known internationally as a mart...  1955   \n",
       "5   Emily Burns is being held captive in a room w...  2016   \n",
       "\n",
       "                                      description_pp  \n",
       "0  L.R. Brane loves - car, apartment, job, especi...  \n",
       "1  Spain, March 1964: Quico naughty child three b...  \n",
       "3  father died, spoken brother 10 years serious c...  \n",
       "4  known internationally martial arts superstar, ...  \n",
       "5  Emily Burns held captive room idea there. Dete...  "
      ]
     },
<<<<<<< HEAD
     "execution_count": 12,
=======
     "execution_count": 13,
>>>>>>> refs/remotes/origin/main
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tokenize: Split the sentence into words\n",
    "docs = df_test['description_pp']\n",
    "\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "docs = [[lemmatizer.lemmatize(token) for token in doc] for doc in docs]\n",
    "\n",
    "# Lemmatize list of words and join\n",
    "lemmatized_output = [''.join([lemmatizer.lemmatize(w) for w in doc]) for doc in docs]\n",
    "df_test['description_pp'] = lemmatized_output\n",
    "df_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2261344",
   "metadata": {
    "id": "f2261344"
   },
   "source": [
    "# Baseline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "q35ZKsHI4ocb",
   "metadata": {
    "id": "q35ZKsHI4ocb"
   },
   "source": [
    "## Random assignment based on frequency of genres in the training data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "XevdyuyV5hh0",
   "metadata": {
    "id": "XevdyuyV5hh0"
   },
   "source": [
    "Choose randomly among the genres and use the share of the genres in the training data set as probability that a specific genre is assigned"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 13,
=======
   "execution_count": 14,
>>>>>>> refs/remotes/origin/main
   "id": "8dd4xRNb2g3c",
   "metadata": {
    "id": "8dd4xRNb2g3c"
   },
   "outputs": [],
   "source": [
    "genre_priors = df_train.genre.value_counts() / df_train.shape[0]\n",
    "genre_priors = pd.DataFrame(data={\"genre\":genre_priors.index, \"probability\": genre_priors.values})\n",
    "genre_priors = genre_priors.sort_values(\"genre\")"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 14,
=======
   "execution_count": 15,
>>>>>>> refs/remotes/origin/main
   "id": "EvHcncJL2iL1",
   "metadata": {
    "id": "EvHcncJL2iL1"
   },
   "outputs": [],
   "source": [
    "# Predict genres for test data\n",
    "prior_predictions = np.random.choice(genre_priors.genre.values, size = df_test.shape[0], p = genre_priors.probability.values)\n",
    "df_test[\"prior_predictions\"] = prior_predictions"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 15,
=======
   "execution_count": 16,
>>>>>>> refs/remotes/origin/main
   "id": "2NixmsPz5JUG",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "2NixmsPz5JUG",
    "outputId": "d524c02e-3430-45e7-e5af-9f2f31ab41c6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "F1:  0.31964209370806496\n",
      "Recall:  0.3195302399080592\n"
=======
      "F1:  0.3270937372375543\n",
      "Recall:  0.3271440884930326\n"
>>>>>>> refs/remotes/origin/main
     ]
    }
   ],
   "source": [
    "# Evaluate prediction performance\n",
    "true_labels = df_test[\"genre\"]\n",
    "f1 = f1_score(true_labels, prior_predictions, average=\"weighted\")\n",
    "recall = recall_score(true_labels, prior_predictions, average=\"weighted\")\n",
    "\n",
    "print(\"F1: \",f1)\n",
    "print(\"Recall: \",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "X9a_0ugM4sj8",
   "metadata": {
    "id": "X9a_0ugM4sj8"
   },
   "source": [
    "## Dictionary based prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "RloPAeaxGfFj",
   "metadata": {
    "id": "RloPAeaxGfFj"
   },
   "source": [
    "### Frequency (TF) dictionary\n",
    "\n",
    "Creating an dictionary using the 50 most frequent words per category."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 16,
=======
   "execution_count": 17,
>>>>>>> refs/remotes/origin/main
   "id": "hEfQplLaGebO",
   "metadata": {
    "id": "hEfQplLaGebO"
   },
   "outputs": [],
   "source": [
    "terms_by_genre = {}\n",
    "\n",
    "# Iterrate over genres\n",
    "for genre in df_train['genre'].unique():\n",
    "\n",
    "    # Join descriptions of all movies for each genre\n",
    "    genre_df = df_train[df_train['genre'] == genre]\n",
    "    all_descriptions = ' '.join(genre_df['description_pp'])\n",
    "    all_words = all_descriptions.split()\n",
    "    word_counts = Counter(all_words)\n",
    "    sorted_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n",
    "    top_words = [word for word, count in sorted_words[:50]]\n",
    "    terms_by_genre[genre] = top_words"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 17,
=======
   "execution_count": 18,
>>>>>>> refs/remotes/origin/main
   "id": "o92tFGSEHudP",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "o92tFGSEHudP",
    "outputId": "cab1e174-6dee-44fb-e4c7-8a3f1af9499a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Share of data which was labeled based on dictionary: 0.521\n",
      "Share of data randomly labled using prior distribution: 0.479\n"
     ]
    }
   ],
   "source": [
    "df_test[\"frequency_prediction\"] = dictionary_predictions(df_test, \"description_pp\", terms_by_genre, genre_priors)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 18,
=======
   "execution_count": 19,
>>>>>>> refs/remotes/origin/main
   "id": "Qk1ByRXqHuTz",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Qk1ByRXqHuTz",
    "outputId": "ad686450-eac5-4869-ecca-4e667f3d59bd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "F1:  0.4100021220987992\n",
      "Recall:  0.39265191782789827\n"
=======
      "F1:  0.40960308989377336\n",
      "Recall:  0.39261600344778047\n"
>>>>>>> refs/remotes/origin/main
     ]
    }
   ],
   "source": [
    "true_labels = df_test[\"genre\"]\n",
    "f1 = f1_score(true_labels, df_test[\"frequency_prediction\"], average=\"weighted\")\n",
    "recall = recall_score(true_labels, df_test[\"frequency_prediction\"], average=\"weighted\")\n",
    "\n",
    "print(\"F1: \",f1)\n",
    "print(\"Recall: \",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "u7yY-xcxIJ7G",
   "metadata": {
    "id": "u7yY-xcxIJ7G"
   },
   "source": [
    "### TF-IDF dictionary"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 19,
=======
   "execution_count": 20,
>>>>>>> refs/remotes/origin/main
   "id": "DWohGbfV_y3P",
   "metadata": {
    "id": "DWohGbfV_y3P"
   },
   "outputs": [],
   "source": [
    "# Create a dictionary with the most important words per genre \n",
    "genre_descriptions = df_train.groupby(['genre'])['description_pp'].apply(','.join).reset_index()\n",
    "important_dict_tfidf = create_tfidf_dict(genre_descriptions, 'description_pp', 'genre', 50)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 20,
=======
   "execution_count": 21,
>>>>>>> refs/remotes/origin/main
   "id": "y8dJIxAV59Q_",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "y8dJIxAV59Q_",
    "outputId": "08e53bd2-07be-40f4-81da-b1259463c778"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Share of data which was labeled based on dictionary: 0.303\n",
      "Share of data randomly labled using prior distribution: 0.697\n"
     ]
    }
   ],
   "source": [
    "df_test[\"tfidf_prediction\"] = dictionary_predictions(df_test, \"description_pp\", important_dict_tfidf, genre_priors)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 21,
=======
   "execution_count": 22,
>>>>>>> refs/remotes/origin/main
   "id": "GDJJxyGaBeSC",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GDJJxyGaBeSC",
    "outputId": "0255c381-ccaa-4229-a681-7aa1f0bcfd0a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "F1:  0.4068633724342645\n",
      "Recall:  0.39994253699181154\n"
=======
      "F1:  0.4081381669716352\n",
      "Recall:  0.4013072834362879\n"
>>>>>>> refs/remotes/origin/main
     ]
    }
   ],
   "source": [
    "# Evaluate prediction performance\n",
    "true_labels = df_test[\"genre\"]\n",
    "f1 = f1_score(true_labels, df_test[\"tfidf_prediction\"], average=\"weighted\")\n",
    "recall = recall_score(true_labels, df_test[\"tfidf_prediction\"], average=\"weighted\")\n",
    "\n",
    "print(\"F1: \",f1)\n",
    "print(\"Recall: \",recall)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2536653",
   "metadata": {
    "id": "f2536653"
   },
   "source": [
    "# GRU Network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "pecRt8Iwiho3",
   "metadata": {
    "id": "pecRt8Iwiho3"
   },
   "source": [
    "In this report we choose a Gated Recurrent Unit (GRU) neural network for our Recurrent Neural Network (RNN) model. GRU neural networks are designed to capture long-term dependencies in sequential data, they use two gate mechanisms to control the flow of information between the hidden states of the network.\n",
    "\n",
    "On one hand, there's the update gate which helps the model to determine how much of the past information (from previous time steps) needs to be passed along to the future. Finally there's also the reset gate which is used from the model to decide how much of the past information to forget. This allows them to selectively update or forget information from previous time steps, which helps prevent the vanishing gradient problem and allows them to better handle long-term dependencies.\n",
    "\n",
    "Additionally, we chose a GRU model because they are computationally efficient and have fewer parameters compared to other RNNs like Long Short-Term Memory (LSTM), making them a good choice when we have with limited computational resources."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 22,
=======
   "execution_count": 23,
>>>>>>> refs/remotes/origin/main
   "id": "f55cecf9",
   "metadata": {
    "id": "f55cecf9",
    "outputId": "69f4b2e4-e47f-4351-cabf-1610deeca427"
   },
   "outputs": [],
   "source": [
    "# input and target columns\n",
    "X_train = df_train[\"description_pp\"].values\n",
    "y_train = pd.get_dummies(df_train[\"genre\"]).values\n",
    "\n",
    "X_test = df_test[\"description_pp\"].values\n",
    "y_test = pd.get_dummies(df_test[\"genre\"]).values\n",
    "\n",
    "# find the maximum length of the descriptions or 1200\n",
    "maxlen = min(max(len(description) for description in X_train), 1200)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 23,
=======
   "execution_count": 24,
>>>>>>> refs/remotes/origin/main
   "id": "707c29bc",
   "metadata": {
    "id": "707c29bc"
   },
   "outputs": [],
   "source": [
    "# tokenize the input text\n",
    "tokenizer = Tokenizer(num_words=10000)\n",
    "tokenizer.fit_on_texts(X_train)\n",
    "X_train = tokenizer.texts_to_sequences(X_train)\n",
    "X_train = pad_sequences(X_train, maxlen=maxlen)\n",
    "X_test = tokenizer.texts_to_sequences(X_test)\n",
    "X_test = pad_sequences(X_test, maxlen=maxlen)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 24,
=======
   "execution_count": 25,
>>>>>>> refs/remotes/origin/main
   "id": "3890d555",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
<<<<<<< HEAD
     "execution_count": 24,
=======
     "execution_count": 25,
>>>>>>> refs/remotes/origin/main
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.isdir('bidir_gru_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1bWJDnCis0b",
   "metadata": {
    "id": "f1bWJDnCis0b"
   },
   "source": [
    "In our case we will build a one bidirectional layer GRU neural network, with a final softmax layer to choose over the 7 possible final classes."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 25,
=======
   "execution_count": 26,
>>>>>>> refs/remotes/origin/main
   "id": "2230c1d2",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 399
    },
    "id": "2230c1d2",
    "outputId": "9c080479-55d1-48d4-b01e-58fab844e017"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "2023-03-30 22:40:05.193276: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:05.194180: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.194245: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.194307: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.255438: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.255516: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.255577: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.307122: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:05.308216: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.308284: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.308352: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.334894: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.334975: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.335034: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.419749: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.419872: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.420047: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.505918: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:05.506870: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.506945: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.507013: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.524787: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:05.525708: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.525779: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.525841: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.542594: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:05.543494: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.543558: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.543621: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-03-30 22:40:05.668887: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:05.670376: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.670445: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.670507: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.705254: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.705339: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.705403: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.746743: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.746819: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.746879: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.961071: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.961147: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.961208: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:05.977597: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:05.978535: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:05.978605: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:05.978666: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.045586: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.046605: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.046671: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.046735: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.064289: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.065249: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.065316: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.065375: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.122294: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.122373: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.122434: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.141078: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.141995: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.142062: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.142127: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.160969: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.161045: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.161105: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-03-30 22:40:06.244058: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.244136: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.244221: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.312412: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.314016: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.314089: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.314183: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.353397: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.354422: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.354493: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.354557: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.448862: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.448945: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.449009: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.497845: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.499233: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.499312: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.499380: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.517092: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.518162: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.518231: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.518295: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-03-30 22:40:06.713233: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.713315: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.713383: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.786254: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.786335: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.786395: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:06.804027: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:06.805121: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:06.805191: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:06.805256: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:07.077117: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:07.077193: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:07.077252: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:07.163962: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:07.165172: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:07.165244: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:07.165308: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:07.202445: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:07.202526: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:07.202586: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:07.239682: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:07.239758: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:07.239817: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:07.256332: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:07.256422: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:07.256487: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-03-30 22:40:07.657039: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:07.657120: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:07.657181: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:07.680898: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_reversev2_grad_reversev2_reversev2_axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients_reversev2_grad_reversev2_reversev2_axis}}]]\n",
      "2023-03-30 22:40:07.681960: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_2_grad_concat_split_2_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_2_grad_concat_split_2_split_dim}}]]\n",
      "2023-03-30 22:40:07.682029: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_grad_concat_split_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_grad_concat_split_split_dim}}]]\n",
      "2023-03-30 22:40:07.682091: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients_split_1_grad_concat_split_1_split_dim' with dtype int32\n",
      "\t [[{{node gradients_split_1_grad_concat_split_1_split_dim}}]]\n",
      "2023-03-30 22:40:07.904583: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients/split_2_grad/concat/split_2/split_dim' with dtype int32\n",
      "\t [[{{node gradients/split_2_grad/concat/split_2/split_dim}}]]\n",
      "2023-03-30 22:40:07.905953: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients/split_grad/concat/split/split_dim' with dtype int32\n",
      "\t [[{{node gradients/split_grad/concat/split/split_dim}}]]\n",
      "2023-03-30 22:40:07.906921: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients/split_1_grad/concat/split_1/split_dim' with dtype int32\n",
      "\t [[{{node gradients/split_1_grad/concat/split_1/split_dim}}]]\n",
      "2023-03-30 22:40:08.006791: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients/ReverseV2_grad/ReverseV2/ReverseV2/axis' with dtype int32 and shape [1]\n",
      "\t [[{{node gradients/ReverseV2_grad/ReverseV2/ReverseV2/axis}}]]\n",
      "2023-03-30 22:40:08.031408: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients/split_2_grad/concat/split_2/split_dim' with dtype int32\n",
      "\t [[{{node gradients/split_2_grad/concat/split_2/split_dim}}]]\n",
      "2023-03-30 22:40:08.032359: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients/split_grad/concat/split/split_dim' with dtype int32\n",
      "\t [[{{node gradients/split_grad/concat/split/split_dim}}]]\n",
      "2023-03-30 22:40:08.033297: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'gradients/split_1_grad/concat/split_1/split_dim' with dtype int32\n",
      "\t [[{{node gradients/split_1_grad/concat/split_1/split_dim}}]]\n"
=======
      "2023-03-30 22:27:46.041277: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2023-03-30 22:27:46.041549: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:27:46.041614: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublas.so.11'; dlerror: libcublas.so.11: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:27:46.041659: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublasLt.so.11'; dlerror: libcublasLt.so.11: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:27:46.041704: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcufft.so.10'; dlerror: libcufft.so.10: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:27:46.042273: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcusparse.so.11'; dlerror: libcusparse.so.11: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: :/opt/gurobi952/linux64/lib\n",
      "2023-03-30 22:27:46.042311: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1934] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.\n",
      "Skipping registering GPU devices...\n",
      "2023-03-30 22:27:46.042562: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
>>>>>>> refs/remotes/origin/main
     ]
    }
   ],
   "source": [
    "if os.path.isdir('bidir_gru_model'):\n",
    "    \n",
    "    model = keras.models.load_model('bidir_gru_model')\n",
    "    \n",
    "else:\n",
    "        \n",
    "    # define the model architecture\n",
    "    model = Sequential()\n",
    "    model.add(Embedding(10000, 64, input_length=maxlen))\n",
    "    model.add(Bidirectional(GRU(64, dropout=0.12)))\n",
    "    model.add(Dense(7, activation=\"softmax\"))\n",
    "\n",
    "    # compile the model\n",
    "    model.compile(loss=\"categorical_crossentropy\",\n",
    "                  optimizer=\"adam\",\n",
    "                  metrics=[\"accuracy\"])\n",
    "    \n",
    "    # train the model\n",
    "    model.fit(X_train, y_train, epochs=16, batch_size=32, validation_split=0.2)\n",
    "    \n",
    "    model.save('bidir_gru_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "182f57a1",
   "metadata": {},
   "source": [
    "We can observe a significant improvement over the baseline model with 0.633 and 0.635 values for f1 and recall scores respectively,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5f704335",
   "metadata": {
    "id": "5f704335"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "871/871 [==============================] - 49s 55ms/step\n",
      "F1 score: 0.6333757062431329\n",
      "Recall score: 0.6356845280850453\n"
     ]
    }
   ],
   "source": [
    "# evaluate the model on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "y_pred = y_pred.argmax(axis=1)\n",
    "y_true = y_test.argmax(axis=1)\n",
    "f1 = f1_score(y_true, y_pred, average=\"weighted\")\n",
    "recall = recall_score(y_true, y_pred, average=\"weighted\")\n",
    "print(\"F1 score:\", f1)\n",
    "print(\"Recall score:\", recall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0ab0330a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test[\"gru_prediction\"] = y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7679c303",
   "metadata": {
    "id": "36528881"
   },
   "source": [
    "While GRU neural networks are effective in capturing long-term dependencies in sequential data, they also have some limitations. One of them is that they can struggle with handling very long sequences due to the limited memory capacity of the network. In addition, GRUs may not be the best choice for tasks that require explicit modeling of temporal dynamics, as they do not have explicit memory units like LSTMs have. Finally, GRUs can be prone to overfitting if the training data is limited or noisy, and may require additional regularization techniques to address this issue."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fa4b775",
   "metadata": {},
   "source": [
    "# LSTM Network\n",
    "\n",
    "To compare we also build an equivalent Long Short-Term Memory (LSTM) neural network. LSTMs, like GRUs, are designed to capture long-term dependencies in sequential data. However, unlike GRUs, they use three gate mechanisms instead of 2 to control the flow of information between the hidden states of the network.\n",
    "\n",
    "The forget gate is used to decide how much of the past information to forget, while the input gate is used to decide how much of the current input to keep. Finally, the output gate determines the amount of output to be produced. This allows LSTMs to selectively update or forget information from previous time steps, which helps prevent the vanishing gradient problem and allows them to better handle long-term dependencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "34cb0cf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "if os.path.isdir('bidir_lstm_model'):\n",
    "    \n",
    "    model_lstm = keras.models.load_model('bidir_lstm_model')\n",
    "    \n",
    "else:\n",
    "        \n",
    "    # define the model architecture\n",
    "    model_lstm = Sequential()\n",
    "    model_lstm.add(Embedding(10000, 64, input_length=maxlen))\n",
    "    model_lstm.add(Bidirectional(LSTM(64, dropout=0.12)))\n",
    "    model_lstm.add(Dense(7, activation=\"softmax\"))\n",
    "\n",
    "    # compile the model\n",
    "    model_lstm.compile(loss=\"categorical_crossentropy\",\n",
    "                  optimizer=\"adam\",\n",
    "                  metrics=[\"accuracy\"])\n",
    "    \n",
    "    # train the model\n",
    "    model_lstm.fit(X_train, y_train, epochs=14,batch_size=32, validation_split=0.2)\n",
    "    \n",
    "    model_lstm.save('bidir_lstm_model')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5f31980",
   "metadata": {},
   "source": [
    "We can see how as expected, the LSTM took longer to finish each epoch (204s for LSTM vs 186s for GRU) and also was more resource intensive in terms of RAM. The obtained f1 and recall results are equivalent although we see they are slightly better for LSTM, one of the reasons would be that LSTM has an explicit memory gate unit which makes the model slightly more complex to handle the text classification problem at hand. Also our sequences can be quite long (up to 1200 elements) so LSTM is a little better suited for those long sequences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "787b054e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "871/871 [==============================] - 64s 73ms/step\n",
      "F1 score: 0.6424811655255757\n",
      "Recall score: 0.6468539003016808\n"
     ]
    }
   ],
   "source": [
    "# evaluate the model on the test set\n",
    "y_pred = model_lstm.predict(X_test)\n",
    "y_pred = y_pred.argmax(axis=1)\n",
    "y_true = y_test.argmax(axis=1)\n",
    "f1 = f1_score(y_true, y_pred, average=\"weighted\")\n",
    "recall = recall_score(y_true, y_pred, average=\"weighted\")\n",
    "print(\"F1 score:\", f1)\n",
    "print(\"Recall score:\", recall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "734e652f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test[\"lstm_prediction\"] = y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41483c81",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test.to_csv(\"test_predictions.csv\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9bd8a5b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "327ddf35",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af1d4675",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "dc8f1ad7",
   "metadata": {
    "id": "012d62b4"
   },
   "source": [
    "# Confusion Matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "996def29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>title</th>\n",
       "      <th>genre</th>\n",
       "      <th>description</th>\n",
       "      <th>year</th>\n",
       "      <th>description_pp</th>\n",
       "      <th>prior_predictions</th>\n",
       "      <th>frequency_prediction</th>\n",
       "      <th>tfidf_prediction</th>\n",
       "      <th>gru_prediction</th>\n",
       "      <th>lstm_prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Edgar's Lunch (1998)</td>\n",
       "      <td>thriller</td>\n",
       "      <td>L.R. Brane loves his life - his car, his apar...</td>\n",
       "      <td>1998</td>\n",
       "      <td>L.R. Brane loves - car, apartment, job, especi...</td>\n",
       "      <td>drama</td>\n",
       "      <td>horror</td>\n",
       "      <td>drama</td>\n",
       "      <td>thriller</td>\n",
       "      <td>drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>La guerra de papá (1977)</td>\n",
       "      <td>comedy</td>\n",
       "      <td>Spain, March 1964: Quico is a very naughty ch...</td>\n",
       "      <td>1977</td>\n",
       "      <td>Spain, March 1964: Quico naughty child three b...</td>\n",
       "      <td>comedy</td>\n",
       "      <td>drama</td>\n",
       "      <td>drama</td>\n",
       "      <td>drama</td>\n",
       "      <td>drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Meu Amigo Hindu (2015)</td>\n",
       "      <td>drama</td>\n",
       "      <td>His father has died, he hasn't spoken with hi...</td>\n",
       "      <td>2015</td>\n",
       "      <td>father died, spoken brother 10 years serious c...</td>\n",
       "      <td>drama</td>\n",
       "      <td>comedy</td>\n",
       "      <td>drama</td>\n",
       "      <td>drama</td>\n",
       "      <td>drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Er nu zhai (1955)</td>\n",
       "      <td>drama</td>\n",
       "      <td>Before he was known internationally as a mart...</td>\n",
       "      <td>1955</td>\n",
       "      <td>known internationally martial arts superstar, ...</td>\n",
       "      <td>comedy</td>\n",
       "      <td>drama</td>\n",
       "      <td>comedy</td>\n",
       "      <td>drama</td>\n",
       "      <td>drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Riddle Room (2016)</td>\n",
       "      <td>horror</td>\n",
       "      <td>Emily Burns is being held captive in a room w...</td>\n",
       "      <td>2016</td>\n",
       "      <td>Emily Burns held captive room idea there. Dete...</td>\n",
       "      <td>drama</td>\n",
       "      <td>thriller</td>\n",
       "      <td>horror</td>\n",
       "      <td>comedy</td>\n",
       "      <td>comedy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                       title     genre  \\\n",
       "0           0       Edgar's Lunch (1998)   thriller   \n",
       "1           1   La guerra de papá (1977)     comedy   \n",
       "2           3     Meu Amigo Hindu (2015)      drama   \n",
       "3           4          Er nu zhai (1955)      drama   \n",
       "4           5         Riddle Room (2016)     horror   \n",
       "\n",
       "                                         description  year  \\\n",
       "0   L.R. Brane loves his life - his car, his apar...  1998   \n",
       "1   Spain, March 1964: Quico is a very naughty ch...  1977   \n",
       "2   His father has died, he hasn't spoken with hi...  2015   \n",
       "3   Before he was known internationally as a mart...  1955   \n",
       "4   Emily Burns is being held captive in a room w...  2016   \n",
       "\n",
       "                                      description_pp prior_predictions  \\\n",
       "0  L.R. Brane loves - car, apartment, job, especi...             drama   \n",
       "1  Spain, March 1964: Quico naughty child three b...            comedy   \n",
       "2  father died, spoken brother 10 years serious c...             drama   \n",
       "3  known internationally martial arts superstar, ...            comedy   \n",
       "4  Emily Burns held captive room idea there. Dete...             drama   \n",
       "\n",
       "  frequency_prediction tfidf_prediction gru_prediction lstm_prediction  \n",
       "0               horror            drama       thriller           drama  \n",
       "1                drama            drama          drama           drama  \n",
       "2               comedy            drama          drama           drama  \n",
       "3                drama           comedy          drama           drama  \n",
       "4             thriller           horror         comedy          comedy  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load Test DF with all predictions\n",
    "df_test = pd.read_csv(directory_miguel + 'test_predictions.csv')\n",
    "cat_mapper = {0:'action', 1:'comedy', 2:'drama', 3:'horror', 4:'sci-fi', 5:'thriller', 6:'western'}\n",
    "df_test['gru_prediction'] = df_test['gru_prediction'].map(cat_mapper)\n",
    "df_test['lstm_prediction'] = df_test['lstm_prediction'].map(cat_mapper)\n",
    "\n",
    "\n",
    "labs = list(cat_mapper.values())\n",
    "df_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02ef3ae6",
   "metadata": {},
   "source": [
    "### Baseline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16878d99",
   "metadata": {
    "id": "a3120391"
   },
   "source": [
    "Our best baseline model, using the weighted F-1 score, is the TF dictionary. So let's take a look at the confusion matrix and error metrics for these predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "e99e2f4c",
   "metadata": {
    "id": "e99e2f4c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "cm = confusion_matrix(df_test['genre'], df_test['frequency_prediction'], labels=labs)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labs)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "1c1c1958",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "      action      0.141     0.228     0.174      1314\n",
      "      comedy      0.386     0.365     0.375      7446\n",
      "       drama      0.584     0.456     0.512     13612\n",
      "      horror      0.241     0.284     0.261      2204\n",
      "      sci-fi      0.164     0.415     0.235       646\n",
      "    thriller      0.117     0.183     0.143      1590\n",
      "     western      0.392     0.505     0.441      1032\n",
      "\n",
      "    accuracy                          0.393     27844\n",
      "   macro avg      0.289     0.348     0.306     27844\n",
      "weighted avg      0.440     0.393     0.410     27844\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "# Print the precision and recall, among other metrics\n",
    "print(metrics.classification_report(df_test['genre'], df_test['frequency_prediction'], digits=3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "192c03d9",
   "metadata": {},
   "source": [
    "### RNN (LSTM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "e6d57fce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "cm = confusion_matrix(df_test['genre'], df_test['lstm_prediction'], labels=labs)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labs)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "24ba0e6f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "      action      0.353     0.335     0.344      1314\n",
      "      comedy      0.609     0.649     0.628      7446\n",
      "       drama      0.728     0.745     0.736     13612\n",
      "      horror      0.618     0.584     0.601      2204\n",
      "      sci-fi      0.476     0.378     0.421       646\n",
      "    thriller      0.261     0.193     0.222      1590\n",
      "     western      0.786     0.743     0.764      1032\n",
      "\n",
      "    accuracy                          0.647     27844\n",
      "   macro avg      0.547     0.518     0.531     27844\n",
      "weighted avg      0.640     0.647     0.642     27844\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print the precision and recall, among other metrics\n",
    "print(metrics.classification_report(df_test['genre'], df_test['lstm_prediction'], digits=3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "985241d6",
   "metadata": {},
   "source": [
    "# Biases"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9acf9729",
   "metadata": {},
   "source": [
    "What are potential biases of our model? Some ideas we had were:\n",
    "* Perhaps the year a movie came out affects classification accuracy? Are older movies classified worse? (Not really.)\n",
    "* Does length of description affect classification accuracy? (A little.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73fb366a",
   "metadata": {},
   "source": [
    "## Year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "1c46779d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.25    1982.0\n",
       "0.50    2005.0\n",
       "0.75    2013.0\n",
       "Name: year, dtype: float64"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# There are a few movies for which we don't have the year. Remove these.\n",
    "yrdf = df_test.loc[~(df_test['year'] == 0)]\n",
    "\n",
    "# Plot a histogram of movies over time.\n",
    "plt.hist(yrdf['year'], bins=20)\n",
    "plt.show()\n",
    "\n",
    "yrdf.year.quantile([0.25,0.5,0.75])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "19e17b43",
   "metadata": {},
   "outputs": [],
   "source": [
    "yrdf1 = df_test.loc[(1900 < df_test['year']) & (df_test['year'] < 1982)]\n",
    "yrdf2 = df_test.loc[(2005 > df_test['year']) & (df_test['year'] >= 1982)]\n",
    "yrdf3 = df_test.loc[(2013 > df_test['year']) & (df_test['year'] >= 2005)]\n",
    "yrdf4 = df_test.loc[(df_test['year'] >= 2013)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee9cfff7",
   "metadata": {},
   "source": [
    "### TF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "d42ef782",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weighted F-1 score for movies that came out:\n",
      "before 1982: 0.449 \n",
      "1982-2005:   0.421 \n",
      "2005-2013:   0.42 \n",
      "after 2013:  0.399\n"
     ]
    }
   ],
   "source": [
    "f11 = round(f1_score(yrdf1['genre'], yrdf1['frequency_prediction'], average=\"weighted\"),3)\n",
    "f12 = round(f1_score(yrdf2['genre'], yrdf2['frequency_prediction'], average=\"weighted\"),3)\n",
    "f13 = round(f1_score(yrdf3['genre'], yrdf3['frequency_prediction'], average=\"weighted\"),3)\n",
    "f14 = round(f1_score(yrdf4['genre'], yrdf4['frequency_prediction'], average=\"weighted\"),3)\n",
    "print('Weighted F-1 score for movies that came out:\\nbefore 1982:', f11, \n",
    "      '\\n1982-2005:  ',f12, \n",
    "      '\\n2005-2013:  ',f13, \n",
    "      '\\nafter 2013: ',f14)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82ef4e0b",
   "metadata": {},
   "source": [
    "### LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "48794c39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weighted F-1 score for movies that came out:\n",
      "before 1982: 0.687 \n",
      "1982-2005:   0.638 \n",
      "2005-2013:   0.652 \n",
      "after 2013:  0.63\n"
     ]
    }
   ],
   "source": [
    "f11 = round(f1_score(yrdf1['genre'], yrdf1['lstm_prediction'], average=\"weighted\"),3)\n",
    "f12 = round(f1_score(yrdf2['genre'], yrdf2['lstm_prediction'], average=\"weighted\"),3)\n",
    "f13 = round(f1_score(yrdf3['genre'], yrdf3['lstm_prediction'], average=\"weighted\"),3)\n",
    "f14 = round(f1_score(yrdf4['genre'], yrdf4['lstm_prediction'], average=\"weighted\"),3)\n",
    "print('Weighted F-1 score for movies that came out:\\nbefore 1982:', f11, \n",
    "      '\\n1982-2005:  ',f12, \n",
    "      '\\n2005-2013:  ',f13, \n",
    "      '\\nafter 2013: ',f14)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4a13c25",
   "metadata": {},
   "source": [
    "## Length of Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "0039020c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.25    221.00\n",
       "0.50    316.00\n",
       "0.75    488.25\n",
       "Name: desc_len, dtype: float64"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test['desc_len'] = [len(x) for x in df_test['description_pp']]\n",
    "df_test.desc_len.quantile([0.25,0.5,0.75])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "e4f5a2fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lendf1 = df_test.loc[(df_test['desc_len'] < 221)]\n",
    "lendf2 = df_test.loc[(316 > df_test['desc_len']) & (df_test['desc_len'] >= 221)]\n",
    "lendf3 = df_test.loc[(488 > df_test['desc_len']) & (df_test['desc_len'] >= 316)]\n",
    "lendf4 = df_test.loc[(df_test['desc_len'] >= 488)]\n",
    "\n",
    "# Plot a histogram of description lengths.\n",
    "plt.hist(df_test['desc_len'], bins=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0467f82",
   "metadata": {},
   "source": [
    "### TF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "648c2dad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weighted F-1 score by length of description (# of characters):\n",
      "0-221:    0.377 \n",
      "250-316:  0.39 \n",
      "316-448:  0.412 \n",
      "448-2500: 0.461\n"
     ]
    }
   ],
   "source": [
    "f11 = round(f1_score(lendf1['genre'], lendf1['frequency_prediction'], average=\"weighted\"),3)\n",
    "f12 = round(f1_score(lendf2['genre'], lendf2['frequency_prediction'], average=\"weighted\"),3)\n",
    "f13 = round(f1_score(lendf3['genre'], lendf3['frequency_prediction'], average=\"weighted\"),3)\n",
    "f14 = round(f1_score(lendf4['genre'], lendf4['frequency_prediction'], average=\"weighted\"),3)\n",
    "print('Weighted F-1 score by length of description (# of characters):\\n0-221:   ', f11, \n",
    "      '\\n250-316: ',f12, \n",
    "      '\\n316-448: ',f13, \n",
    "      '\\n448-2500:',f14)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2695aef",
   "metadata": {},
   "source": [
    "### LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "38c44906",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weighted F-1 score by length of description (# of characters):\n",
      "0-221:    0.604 \n",
      "250-316:  0.635 \n",
      "316-448:  0.653 \n",
      "448-2000: 0.676\n"
     ]
    }
   ],
   "source": [
    "f11 = round(f1_score(lendf1['genre'], lendf1['lstm_prediction'], average=\"weighted\"),3)\n",
    "f12 = round(f1_score(lendf2['genre'], lendf2['lstm_prediction'], average=\"weighted\"),3)\n",
    "f13 = round(f1_score(lendf3['genre'], lendf3['lstm_prediction'], average=\"weighted\"),3)\n",
    "f14 = round(f1_score(lendf4['genre'], lendf4['lstm_prediction'], average=\"weighted\"),3)\n",
    "print('Weighted F-1 score by length of description (# of characters):\\n0-221:   ', f11, \n",
    "      '\\n250-316: ',f12, \n",
    "      '\\n316-448: ',f13, \n",
    "      '\\n448-2000:',f14)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a1bbfdf",
   "metadata": {},
   "source": [
    "### GRU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "729686fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weighted F-1 score by length of description (# of characters):\n",
      "0-221:    0.599 \n",
      "250-316:  0.625 \n",
      "316-448:  0.646 \n",
      "448-2500: 0.662\n"
     ]
    }
   ],
   "source": [
    "f11 = round(f1_score(lendf1['genre'], lendf1['gru_prediction'], average=\"weighted\"),3)\n",
    "f12 = round(f1_score(lendf2['genre'], lendf2['gru_prediction'], average=\"weighted\"),3)\n",
    "f13 = round(f1_score(lendf3['genre'], lendf3['gru_prediction'], average=\"weighted\"),3)\n",
    "f14 = round(f1_score(lendf4['genre'], lendf4['gru_prediction'], average=\"weighted\"),3)\n",
    "print('Weighted F-1 score by length of description (# of characters):\\n0-221:   ', f11, \n",
    "      '\\n250-316: ',f12, \n",
    "      '\\n316-448: ',f13, \n",
    "      '\\n448-2500:',f14)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6d6e51b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
